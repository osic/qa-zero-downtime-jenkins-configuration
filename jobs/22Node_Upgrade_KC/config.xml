<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.9">
  <actions/>
  <description>Project to test and play with BME upgrade</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>from_release</name>
          <description>Parameter used to specify what OpenStack release will be installed as starting point.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>stable/mitaka</string>
              <string>stable/newton</string>
              <string>master</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>to_release</name>
          <description>Parameter used to specify what OpenStack release to upgrade to.</description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>stable/newton</string>
              <string>master</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>rebuild_environment</name>
          <description>Parameter used to indicate whether the BME should be rebuilt prior to execution.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>redeploy_openstack</name>
          <description>Parameter used to indicate whether OpenStack should be redeployed prior to execution.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>#!/usr/bin/env groovy

def osa, common, bme
String workspace_dir
String onmetal_ip, elasticsearch_ip, elasticsearch_pkey

// Jenkins must provide these variables as parameters or the build 
// will fail:
//  - from_release
//  - to_release
//  - rebuild_environment
//  - redeploy_openstack


// *******************************
stage &apos;Deployment&apos;
// *******************************

echo &apos;Load Libs&apos;
node(&apos;bme-jenkins-slave-n01&apos;) {
    
    // Load the external functions using master since the git command
    // might not be available at the agent yet
    fileLoader.withGit(&apos;https://github.com/dankolbrs/qa-jenkins-onmetal.git&apos;, &apos;master&apos;, null, &apos;&apos;) {
        common = fileLoader.load(&apos;jenkins/common.groovy&apos;);
        osa = fileLoader.load(&apos;jenkins/osa_onmetal.functions.groovy&apos;);
        bme = fileLoader.load(&apos;jenkins/bme.functions.groovy&apos;);
    }
    
}

node(&apos;elasticsearch&apos;) {

    echo &apos;Get the server information&apos;
    elasticsearch_ip = common.get_server_ip()
    elasticsearch_pkey = common.get_server_public_key()

}

node(&apos;bme-jenkins-slave-n01&apos;) {

    echo &apos;Connect to f5 vpn&apos;  
    withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;b4df0136-d403-4e1c-a62b-10d751505d77&apos;,
    usernameVariable: &apos;CLOUD_USER&apos;, passwordVariable: &apos;CLOUD_PASS&apos;]]) {
    
    bme.connect_vpn(&quot;72.32.87.87&quot;, &quot;${CLOUD_USER}&quot;, &quot;${CLOUD_PASS}&quot;)
    
    echo &apos;SSH to deploy node&apos;
    sh &quot;&quot;&quot;
    echo &quot;[deploy_node]&quot; &gt; hosts
    echo &quot;intelci-node ansible_ssh_host=172.24.0.21 ansible_ssh_user=root&quot; &gt;&gt; hosts
    &quot;&quot;&quot;

    // env prep
    if (${rebuild_environment} == false &amp;&amp; ${redeploy_openstack == false}) {
        echo &apos;Skipping rebuild environment and redeploy OpenStack.&apos;
    } else if (${rebuild_environment} == true &amp;&amp; ${redeploy_openstack == true}) {
        stage &apos;Rebuild environment &amp; redeploy OpenStack.&apos;
        bme.rebuild_environment(true, true)
    } else if (${rebuild_environment} == false &amp;&amp; ${redeploy_openstack == true}) {
        stage &apos;Skip rebuild environment, redeploy OpenStack&apos;
        bme.rebuild_environment(false, true)
    }

    // Run smoke
    stage &apos;Post-Deployment Validation&apos;
    echo &apos;Configure Tempest&apos;
    bme.configure_tempest()
    echo &apos;Run Smoke&apos;
    bme.bash_run_tempest_smoke_tests()

    // Start upgrade


    // Disconnect from VPN
    bme.disconnect_vpn()
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>