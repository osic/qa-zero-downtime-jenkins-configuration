<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.9">
  <actions/>
  <description>Used to run pipeline tests</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>#!/usr/bin/env groovy

def osa, common, bme
String workspace_dir
String container_tempest_dir, deploy_node_ip, controller_utility_container_ip, elasticsearch_ip, elasticsearch_pkey
to_release = &quot;stable/newton&quot;
rebuild_environment = &quot;false&quot;
controller_name = &quot;infra01&quot;
// Jenkins must provide these variables as parameters or the build
// will fail:
//  - to_release
//  - rebuild_environment
//  - controller_name (i.e. controller01) - determines location of utility container to run tests

// *******************************
stage(&apos;Pre-Deployment -- Load Libs&apos;){
// *******************************
    node(&apos;bme-jenkins-slave-n01&apos;) {
        // Load the external functions using master since the git command
        // might not be available at the agent yet
        fileLoader.withGit(&apos;https://github.com/osic/qe-jenkins-baremetal.git&apos;, &apos;master&apos;, null, &apos;&apos;) {
            common = fileLoader.load(&apos;jenkins/common.groovy&apos;);
            osa = fileLoader.load(&apos;jenkins/osa_onmetal.functions.groovy&apos;);
            bme = fileLoader.load(&apos;jenkins/bme.functions.groovy&apos;);
        }
        git &apos;https://github.com/osic/qe-jenkins-baremetal.git&apos;
    }

    node(&apos;elasticsearch&apos;) {
        echo &apos;Get the server information&apos;
        elasticsearch_ip = common.get_server_ip()
        elasticsearch_pkey = common.get_server_public_key()
    }
}

stage(&apos;Pre-Deployment -- Configure Network on Jenkins Build Node&apos;){
    node(&apos;bme-jenkins-slave-n01&apos;) {
        withCredentials([[$class: &apos;UsernamePasswordMultiBinding&apos;, credentialsId: &apos;b4df0136-d403-4e1c-a62b-10d751505d77&apos;,
        usernameVariable: &apos;CLOUD_USER&apos;, passwordVariable: &apos;CLOUD_PASS&apos;]]) {
            bme.connect_vpn(&quot;72.32.87.87&quot;, &quot;${CLOUD_USER}&quot;, &quot;${CLOUD_PASS}&quot;)

            echo &apos;Configure ansible hosts file for SSH&apos;
            sh &quot;&quot;&quot;
                echo &quot;[deploy_node]&quot; &gt; hosts
                echo &quot;intelci-node ansible_ssh_host=172.24.0.21 ansible_ssh_user=root&quot; &gt;&gt; hosts
            &quot;&quot;&quot;
        }
        deploy_node_ip = bme.get_deploy_node_ip()
        controller_utility_container_ip = bme.get_controller_utility_container_ip(controller_name)
    }
}


node(&apos;bme-jenkins-slave-n01&apos;){
    // env prep
    if (rebuild_environment == &quot;true&quot;){
        stage(&apos;Rebuilding Environment and redeploying openstack&apos;){
            echo &quot;Nothing&quot;
            //bme.rebuild_environment()
        }
    } else {
      stage(&apos;Skipping rebuild&apos;){
        echo &apos;Skipping rebuild environment and redeploy OpenStack.&apos;
      }
    }
}



node(&apos;bme-jenkins-slave-n01&apos;){
    stage(&apos;Install and Configure tempest&apos;){
        //bme.setup_ssh_pub_key()
        //bme.install_tempest_tests(controller_name)
        //bme.configure_tempest(controller_name)
        //container_tempest_dir = bme.get_tempest_dir(controller_name)
    }
    stage(&apos;Run Tempest Smoke Tests&apos;) {
        bme.run_tempest_tests(controller_name, &apos;smoke&apos;, &apos;before_upgrade&apos;, elasticsearch_ip, &apos;/opt/tempest_untagged&apos;)
    }
}

stage(&apos;Pre-Upgrade Configuration&apos;){
    node(&apos;bme-jenkins-slave-n01&apos;){
        bme.install_api_uptime_tests(controller_name, container_tempest_dir)
        bme.install_during_upgrade_tests(controller_name, container_tempest_dir)
        bme.install_persistent_resources_tests(controller_name, container_tempest_dir)
        bme.install_persistent_resources_tests_parse(controller_name, container_tempest_dir)
        bme.run_persistent_resources_tests(controller_name, &apos;create&apos;, null, container_tempest_dir)
    }
}


node(&apos;bme-jenkins-slave-n01&apos;){
    stage(&apos;Start Upgrade tests&apos;){
        bme.start_api_uptime_tests(controller_name, container_tempest_dir)
        bme.start_during_upgrade_test(controller_name, container_tempest_dir)
    }
    stage(&apos;Run Upgrade&apos;){
	      bme.bash_upgrade_openstack(to_release, 1, false)
    }
    stage(&apos;Stop Upgrade tests&apos;){
        bme.stop_api_uptime_tests(controller_name, container_tempest_dir)
        bme.stop_during_upgrade_test(controller_name, container_tempest_dir)
    }
}

stage(&apos;Post-Upgrade -- Validate Deploy&apos;){
    node(&apos;bme-jenkins-slave-n01&apos;){
        try {
          bme.install_tempest_tests(controller_name)
        } catch (err){
          echo &quot;Error in step&quot;
          echo err.message
        }
        try {
            bme.configure_tempest(controller_name)
        } catch (err){
            echo &quot;Error in step&quot;
            echo err.message
        }
        try {
            bme.run_tempest_tests(controller_name, &apos;smoke&apos;, &apos;after_upgrade&apos;, elasticsearch_ip, &apos;/openstack/venvs/tempest-untagged&apos;)
        } catch (err){
            echo &quot;Error in step&quot;
            echo err.message
        }
        try {
            bme.run_persistent_resources_tests(controller_name, &apos;verify&apos;, null, &apos;/openstack/venvs/tempest-untagged&apos;)
        } catch (err){
            echo &quot;Error in step&quot;
            echo err.message
        }
        try {
            bme.parse_persistent_resources_tests(controller_name, &apos;/openstack/venvs/tempest-untagged&apos;)
        } catch (err){
            echo &quot;Error in step&quot;
            echo err.message
        }
        try {
            bme.run_persistent_resources_tests(controller_name, &apos;clean&apos;, null, &apos;/openstack/venvs/tempest-untagged&apos;)
        } catch (err){
            echo &quot;Error in step&quot;
            echo err.message
        }
    }
}


stage(&apos;Post-Upgrade -- Reporting&apos;){
    node(&apos;bme-jenkins-slave-n01&apos;){
      try {
          bme.install_persistent_resources_tests_parse(controller_name, &apos;/openstack/venvs/tempest-untagged&apos;)
      } catch (err){
          echo &quot;Error in step&quot;
          echo err.message
      }
      try {
          bme.parse_persistent_resources_tests(controller_name, &apos;/openstack/venvs/tempest-untagged&apos;)
      } catch (err){
          echo &quot;Error in step&quot;
          echo err.message
      }
      try {
          bme.aggregate_results(deploy_node_ip, elasticsearch_ip, container_tempest_dir)
      } catch (err){
          echo &quot;Error in step&quot;
          echo err.message
      }
    }
    node(&apos;elasticsearch&apos;){
      try {
          osa.install_parser()
      } catch (err){
          echo &quot;Error in step&quot;
          echo err.message
      }
      try {
          osa.parse_results()
      } catch (err){
          echo &quot;Error in step&quot;
          echo err.message
      }
    }
}

stage(&apos;Complete - Disconnect from VPN&apos;){
    node(&apos;bme-jenkins-slave-n01&apos;){
        bme.disconnect_vpn()
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>